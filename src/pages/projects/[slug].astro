---
import type { CollectionEntry } from 'astro:content';
import { getCollection } from 'astro:content';
import { format } from 'date-fns';
import { Tag } from '../../components/site/Tag';
import PageLayout from '../../layouts/PageLayout.astro';
import { site } from '../../config/site';

export async function getStaticPaths() {
  const projects = (await getCollection('projects')) as CollectionEntry<'projects'>[];
  return projects.map((project) => ({
    params: { slug: project.slug },
  }));
}

const { slug } = Astro.params;
const projects = (await getCollection('projects')) as CollectionEntry<'projects'>[];
const entry = projects.find((project) => project.slug === slug);

if (!entry) {
  throw new Error(`Project not found for slug: ${slug}`);
}

const { Content } = await entry.render();

const title = `${entry.data.title} | Projects & Tools`;
const description = entry.data.summary;
const statusLabel = entry.data.status.replace('-', ' ');
const canonical = `${site.url}/projects/${entry.slug}`;

const formatDate = (value?: string) =>
  value ? format(new Date(value), 'MMMM d, yyyy') : null;

const started = formatDate(entry.data.date_started);
const updated = formatDate(entry.data.date_updated);
---
<PageLayout
  title={title}
  description={description}
  canonical={canonical}
  ogType="article"
>

  <article class="space-y-10">
    <header class="space-y-6">
      <p class="text-sm uppercase tracking-[0.4em] text-muted">Project</p>
      <h1 class="font-display text-4xl font-semibold tracking-tight text-foreground md:text-5xl">
        {entry.data.title}
      </h1>
      <p class="max-w-3xl text-lg text-muted">{entry.data.summary}</p>
      <div class="flex flex-wrap gap-3 text-sm text-muted">
        <Tag>{statusLabel}</Tag>
        {entry.data.tags.map((tag: string) => (
          <Tag key={tag} className="capitalize">
            {tag}
          </Tag>
        ))}
      </div>
      <dl class="flex flex-wrap gap-6 text-sm text-muted">
        {started ? (
          <div>
            <dt class="font-semibold text-foreground">Started</dt>
            <dd>{started}</dd>
          </div>
        ) : null}
        {updated ? (
          <div>
            <dt class="font-semibold text-foreground">Last updated</dt>
            <dd>{updated}</dd>
          </div>
        ) : null}
        {entry.data.repo ? (
          <div>
            <dt class="font-semibold text-foreground">Repo</dt>
            <dd>
              <a
                href={entry.data.repo}
                class="underline-offset-4 transition hover:text-accent hover:underline"
                target="_blank"
                rel="noreferrer"
              >
                {entry.data.repo}
              </a>
            </dd>
          </div>
        ) : null}
        {entry.data.demo ? (
          <div>
            <dt class="font-semibold text-foreground">Demo</dt>
            <dd>
              <a
                href={entry.data.demo}
                class="underline-offset-4 transition hover:text-accent hover:underline"
                target="_blank"
                rel="noreferrer"
              >
                {entry.data.demo}
              </a>
            </dd>
          </div>
        ) : null}
      </dl>
    </header>

    <div class="prose prose-invert max-w-none lg:prose-lg">
      <Content />
    </div>
  </article>
</PageLayout>
